///
/// NitroGzip-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `GzipResult` to properly resolve imports.
namespace margelo::nitro::nitrogzip { struct GzipResult; }
// Forward declaration of `HybridNitroGzipSpec` to properly resolve imports.
namespace margelo::nitro::nitrogzip { class HybridNitroGzipSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroGzipSpec_cxx` to properly resolve imports.
namespace NitroGzip { class HybridNitroGzipSpec_cxx; }

// Include C++ defined types
#include "GzipResult.hpp"
#include "HybridNitroGzipSpec.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrogzip::bridge::swift {

  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::shared_ptr<Promise<GzipResult>>
  /**
   * Specialized version of `std::shared_ptr<Promise<GzipResult>>`.
   */
  using std__shared_ptr_Promise_GzipResult__ = std::shared_ptr<Promise<GzipResult>>;
  inline std::shared_ptr<Promise<GzipResult>> create_std__shared_ptr_Promise_GzipResult__() {
    return Promise<GzipResult>::create();
  }
  inline PromiseHolder<GzipResult> wrap_std__shared_ptr_Promise_GzipResult__(std::shared_ptr<Promise<GzipResult>> promise) {
    return PromiseHolder<GzipResult>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const GzipResult& /* result */)>
  /**
   * Specialized version of `std::function<void(const GzipResult&)>`.
   */
  using Func_void_GzipResult = std::function<void(const GzipResult& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const GzipResult& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_GzipResult_Wrapper final {
  public:
    explicit Func_void_GzipResult_Wrapper(std::function<void(const GzipResult& /* result */)>&& func): _function(std::make_shared<std::function<void(const GzipResult& /* result */)>>(std::move(func))) {}
    inline void call(GzipResult result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const GzipResult& /* result */)>> _function;
  };
  Func_void_GzipResult create_Func_void_GzipResult(void* _Nonnull swiftClosureWrapper);
  inline Func_void_GzipResult_Wrapper wrap_Func_void_GzipResult(Func_void_GzipResult value) {
    return Func_void_GzipResult_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_shared<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const {
      _function->operator()(error);
    }
  private:
    std::shared_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  };
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitrogzip::HybridNitroGzipSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::nitrogzip::HybridNitroGzipSpec>`.
   */
  using std__shared_ptr_margelo__nitro__nitrogzip__HybridNitroGzipSpec_ = std::shared_ptr<margelo::nitro::nitrogzip::HybridNitroGzipSpec>;
  std::shared_ptr<margelo::nitro::nitrogzip::HybridNitroGzipSpec> create_std__shared_ptr_margelo__nitro__nitrogzip__HybridNitroGzipSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitrogzip__HybridNitroGzipSpec_(std__shared_ptr_margelo__nitro__nitrogzip__HybridNitroGzipSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::nitrogzip::HybridNitroGzipSpec>
  using std__weak_ptr_margelo__nitro__nitrogzip__HybridNitroGzipSpec_ = std::weak_ptr<margelo::nitro::nitrogzip::HybridNitroGzipSpec>;
  inline std__weak_ptr_margelo__nitro__nitrogzip__HybridNitroGzipSpec_ weakify_std__shared_ptr_margelo__nitro__nitrogzip__HybridNitroGzipSpec_(const std::shared_ptr<margelo::nitro::nitrogzip::HybridNitroGzipSpec>& strong) { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<Promise<GzipResult>>>
  using Result_std__shared_ptr_Promise_GzipResult___ = Result<std::shared_ptr<Promise<GzipResult>>>;
  inline Result_std__shared_ptr_Promise_GzipResult___ create_Result_std__shared_ptr_Promise_GzipResult___(const std::shared_ptr<Promise<GzipResult>>& value) {
    return Result<std::shared_ptr<Promise<GzipResult>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_GzipResult___ create_Result_std__shared_ptr_Promise_GzipResult___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<GzipResult>>>::withError(error);
  }

} // namespace margelo::nitro::nitrogzip::bridge::swift
