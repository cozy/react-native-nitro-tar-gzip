///
/// HybridNitroGzipSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroGzipSpec``
public protocol HybridNitroGzipSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func unTar(sourcePath: String, targetPath: String, force: Bool) throws -> Promise<GzipResult>
  func unGzip(sourcePath: String, targetPath: String, force: Bool) throws -> Promise<GzipResult>
  func unGzipTar(sourcePath: String, targetPath: String, force: Bool) throws -> Promise<GzipResult>
}

/// See ``HybridNitroGzipSpec``
public class HybridNitroGzipSpec_base {
  private weak var cxxWrapper: HybridNitroGzipSpec_cxx? = nil
  public func getCxxWrapper() -> HybridNitroGzipSpec_cxx {
  #if DEBUG
    guard self is HybridNitroGzipSpec else {
      fatalError("`self` is not a `HybridNitroGzipSpec`! Did you accidentally inherit from `HybridNitroGzipSpec_base` instead of `HybridNitroGzipSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroGzipSpec_cxx(self as! HybridNitroGzipSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroGzip HybridObject.
 * Implement this protocol to create Swift-based instances of NitroGzip.
 * ```swift
 * class HybridNitroGzip : HybridNitroGzipSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroGzipSpec = HybridNitroGzipSpec_protocol & HybridNitroGzipSpec_base
